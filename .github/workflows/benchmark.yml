# Benchmarks are sharded.
#
# Each benchmark (parser, transformer, etc) runs in parallel in a separate job.
# Linter benchmarks are much slower to build and run than the rest, so linter benchmark
# is built in 1 job, and then run on each fixture in parallel in separate jobs.
#
# See https://docs.codspeed.io/features/sharded-benchmarks

name: Benchmark

permissions: {}

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "crates/**/*.rs"
      - "tasks/benchmark/**/*.rs"
      - "tasks/common/**/*.rs"
      - "Cargo.lock"
      - "rust-toolchain.toml"
      - ".github/workflows/benchmark.yml"
      - "tasks/benchmark/codspeed/*.mjs"
  push:
    branches:
      - main
    paths:
      - "crates/**/*.rs"
      - "tasks/benchmark/**/*.rs"
      - "tasks/common/**/*.rs"
      - "Cargo.lock"
      - "rust-toolchain.toml"
      - ".github/workflows/benchmark.yml"
      - "tasks/benchmark/codspeed/*.mjs"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  # Add a new job to check if base branch run is completed
  check-base-benchmark:
    name: Check base branch benchmark
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - name: Wait for base branch benchmark run to succeed
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          BASE_BRANCH_NAME: ${{ github.event.pull_request.base.ref }}
          WORKFLOW_FILE_NAME: ${{ github.workflow }}
          MAX_WAIT_MINUTES: 15
        run: |
          echo "Looking for the latest workflow run on '$BASE_BRANCH_NAME' for '$WORKFLOW_FILE_NAME'..."
          INITIAL_RUN_ID=""
          CURRENT_RUN_ID=""

          # Try to find the latest run on the base branch initially
          INITIAL_RUN_ID=$(gh run list --workflow "$WORKFLOW_FILE_NAME" --branch "$BASE_BRANCH_NAME" --limit 1 --json databaseId --jq '.[0].databaseId // empty')

          if [ -z "$INITIAL_RUN_ID" ]; then
            echo "Warning: Could not find a recent run on '$BASE_BRANCH_NAME'. Proceeding without waiting."
          else
            echo "Found initial target run ID: $INITIAL_RUN_ID. Starting to monitor..."
            WAIT_START_TIME=$(date +%s)
            MAX_WAIT_SECONDS=$((MAX_WAIT_MINUTES * 60))
            CURRENT_RUN_ID=$INITIAL_RUN_ID

            while true; do
              # Re-check for the latest workflow run in case there were new pushes
              LATEST_RUN_ID=$(gh run list --workflow "$WORKFLOW_FILE_NAME" --branch "$BASE_BRANCH_NAME" --limit 1 --json databaseId --jq '.[0].databaseId // empty')

              # If we found a newer run ID than what we were tracking, switch to it
              if [ "$LATEST_RUN_ID" != "$CURRENT_RUN_ID" ]; then
                echo "Detected a newer workflow run ($LATEST_RUN_ID) on '$BASE_BRANCH_NAME'. Switching monitoring target."
                CURRENT_RUN_ID=$LATEST_RUN_ID
              fi

              # Check the status of the current run we're monitoring
              RUN_INFO=$(gh run view "$CURRENT_RUN_ID" --json status,conclusion --jq '{status: .status, conclusion: .conclusion}')
              STATUS=$(echo "$RUN_INFO" | jq -r '.status')
              CONCLUSION=$(echo "$RUN_INFO" | jq -r '.conclusion')

              echo "Run $CURRENT_RUN_ID status: $STATUS, conclusion: $CONCLUSION"
              if [ "$STATUS" == "completed" ]; then
                if [ "$CONCLUSION" == "success" ]; then
                  echo "Run $CURRENT_RUN_ID completed successfully. Proceeding."
                  break
                else
                  echo "Warning: Run $CURRENT_RUN_ID completed with conclusion '$CONCLUSION'. Proceeding anyway, but benchmark results may not be accurate."
                  break  # Even though the run failed, we proceed because some changes do not affect the benchmark.
                fi
              fi

              CURRENT_TIME=$(date +%s)
              ELAPSED_TIME=$((CURRENT_TIME - WAIT_START_TIME))
              if [ "$ELAPSED_TIME" -ge "$MAX_WAIT_SECONDS" ]; then
                echo "Warning: Timeout waiting after ${MAX_WAIT_MINUTES} minutes. The current run $CURRENT_RUN_ID has status '$STATUS'. Proceeding anyway."
                break
              fi

              echo "Waiting 30 seconds before checking again..."
              sleep 30
            done
          fi
        shell: bash

  # Build and run benchmarks for all components except linter
  benchmark:
    name: Benchmark
    needs: check-base-benchmark
    if: always()
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        component:
          - lexer
          - parser
          - transformer
          - isolated_declarations
          - semantic
          - minifier
          - codegen
          - formatter

    steps:
      - name: Checkout Branch
        uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - uses: oxc-project/setup-rust@cd82e1efec7fef815e2c23d296756f31c7cdc03d # v1.0.0
        with:
          cache-key: benchmark-${{ matrix.component }}
          save-cache: ${{ github.ref_name == 'main' }}
          tools: cargo-codspeed

      - name: Build benchmark
        env:
          RUSTFLAGS: "-C debuginfo=1 -C strip=none -g --cfg codspeed"
        run: |
          cargo build --release -p oxc_benchmark --bench ${{ matrix.component }} \
            --no-default-features --features ${{ matrix.component }} --features codspeed
          mkdir -p target/codspeed/instrumentation/oxc_benchmark
          mv target/release/deps/${{ matrix.component }}-* target/codspeed/instrumentation/oxc_benchmark
          rm target/codspeed/instrumentation/oxc_benchmark/*.d

      - name: Run benchmark
        uses: CodSpeedHQ/action@0010eb0ca6e89b80c88e8edaaa07cfe5f3e6664d # v3.5.0
        timeout-minutes: 30
        with:
          token: ${{ secrets.CODSPEED_TOKEN }}
          run: cargo codspeed run

  # Build linter benchmark.
  # Linter benchmarks are much slower than the rest, so we run each fixture in a separate job.
  # But only build the linter benchmark once.
  build-linter:
    name: Build Linter Benchmark
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Branch
        uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - uses: oxc-project/setup-rust@cd82e1efec7fef815e2c23d296756f31c7cdc03d # v1.0.0
        with:
          cache-key: benchmark-linter
          save-cache: ${{ github.ref_name == 'main' }}

      - name: Build benchmark
        env:
          RUSTFLAGS: "-C debuginfo=1 -C strip=none -g --cfg codspeed"
        run: |
          cargo build --release -p oxc_benchmark --bench linter \
            --no-default-features --features linter --features codspeed
          mkdir -p target/codspeed/instrumentation/oxc_benchmark
          mv target/release/deps/linter-* target/codspeed/instrumentation/oxc_benchmark
          rm target/codspeed/instrumentation/oxc_benchmark/*.d

      - name: Upload Binary
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          if-no-files-found: error
          name: benchmark-linter
          path: ./target/codspeed/instrumentation/oxc_benchmark
          retention-days: 1

  # Run linter benchmarks. Each fixture in a separate job.
  benchmark-linter:
    name: Benchmark linter
    needs: [check-base-benchmark, build-linter]
    if: always() && needs.build-linter.result == 'success'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        fixture:
          - 0
          - 1

    steps:
      - name: Checkout Branch
        uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - name: Download Binary
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: benchmark-linter
          path: ./target/codspeed/instrumentation/oxc_benchmark

      - name: Fix permission loss
        run: |
          ls ./target/codspeed/instrumentation/oxc_benchmark
          chmod +x ./target/codspeed/instrumentation/oxc_benchmark/*

      - name: Install codspeed
        uses: taiki-e/install-action@ab3728c7ba6948b9b429627f4d55a68842b27f18 # v2.50.3
        with:
          tool: cargo-codspeed

      - name: Run benchmark
        uses: CodSpeedHQ/action@0010eb0ca6e89b80c88e8edaaa07cfe5f3e6664d # v3.5.0
        timeout-minutes: 30
        env:
          FIXTURE: ${{ matrix.fixture }}
        with:
          token: ${{ secrets.CODSPEED_TOKEN }}
          run: cargo codspeed run
